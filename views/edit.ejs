<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/png" href="images/f.png">
  <title>Edit <%= filename %> | Finder...</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              500: '#3b82f6',
              600: '#2563eb',
            },
          },
        }
      }
    }
  </script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .input-focus-effect:focus {
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
      border-color: #3b82f6;
    }

    .shake {
      animation: shake 0.5s;
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      20%, 60% { transform: translateX(-5px); }
      40%, 80% { transform: translateX(5px); }
    }

    html {
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    body {
      min-height: 100vh;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    .btn-disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none !important;
    }

    .filename-input {
      transition: all 0.3s ease;
    }

    .preview-transition {
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
  </style>
</head>

<body class="bg-white dark:bg-zinc-900 text-zinc-900 dark:text-white">

  <div class="main w-full min-h-screen p-4 md:p-10">
    <!-- Header with back button and theme toggle -->
    <div class="flex justify-between items-center mb-6 md:mb-10">
      <a href="/" class="text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300 inline-flex items-center group transition-colors">
        <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i>
        Back to Home
      </a>

      <!-- <button id="theme-toggle" class="p-2 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors">
        <svg id="theme-icon-dark" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-800 dark:text-zinc-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <svg id="theme-icon-light" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-800 dark:text-zinc-200 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </button> -->
    </div>

    <!-- Main form container -->
    <div class="bg-zinc-100 dark:bg-zinc-800 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow max-w-2xl mx-auto">
      <h1 class="text-2xl md:text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-500">
        Rename File
      </h1>

      <form id="editForm" action="/edit" method="post" class="space-y-4">
        <!-- Current filename -->
        <div>
          <label class="block text-sm font-medium text-zinc-600 dark:text-gray-400 mb-1">Current Filename</label>
          <div class="relative">
            <input class="w-full rounded-md outline-none px-5 py-2 text-zinc-900 dark:text-white bg-white dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 input-focus-effect transition-all filename-input" 
                   type="text" 
                   name="previous" 
                   value="<%= filename %>" 
                   readonly>
            <div class="absolute right-3 top-2.5 text-zinc-500 dark:text-gray-400">
              <i class="fas fa-lock"></i>
            </div>
          </div>
        </div>

        <!-- New filename -->
        <div>
          <label class="block text-sm font-medium text-zinc-600 dark:text-gray-400 mb-1">New Filename</label>
          <div class="relative">
            <input id="newFilename"
                   class="w-full rounded-md outline-none px-5 py-2 text-zinc-900 dark:text-white bg-white dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 input-focus-effect transition-all filename-input"
                   type="text" 
                   name="new" 
                   placeholder="Enter new filename..." 
                   required 
                   pattern="[^\\\/:*?\"<>|]+"
                   title="Filename cannot contain special characters (\ / : * ? \" < > |)"
                   autocomplete="off"
                   autocorrect="off"
                   spellcheck="false">
            <div class="absolute right-3 top-2.5 text-zinc-500 dark:text-gray-400">
              <i class="fas fa-edit"></i>
            </div>
          </div>
          <p class="text-xs text-zinc-500 dark:text-gray-500 mt-1">Allowed: letters, numbers, spaces, hyphens, underscores, dots</p>
        </div>

        <!-- Extension info -->
        <div class="flex items-center text-sm text-zinc-600 dark:text-gray-400">
          <span class="mr-2">File extension will remain:</span>
          <span class="font-mono bg-zinc-200 dark:bg-zinc-700 px-2 py-1 rounded text-yellow-600 dark:text-yellow-400">
            .<%= filename.split('.').pop() %>
          </span>
        </div>

        <!-- Submit button -->
        <div class="pt-4">
          <button id="submitBtn" type="submit"
                  class="w-full md:w-auto px-6 py-2 bg-yellow-600 hover:bg-yellow-700 text-white font-medium rounded-md transition-all transform hover:scale-105 active:scale-95 flex items-center justify-center disabled:btn-disabled">
            <span id="btnText">Update Filename</span>
            <span id="btnSpinner" class="ml-2 hidden">
              <i class="fas fa-spinner fa-spin"></i>
            </span>
          </button>
        </div>
      </form>
    </div>

    <!-- File preview section -->
    <div class="mt-8 bg-zinc-100 dark:bg-zinc-800 p-6 rounded-lg max-w-2xl mx-auto preview-transition opacity-0 transform translate-y-2" id="previewSection">
      <h3 class="text-lg font-medium text-zinc-700 dark:text-gray-300 mb-3">Filename Preview</h3>
      <div class="font-mono text-sm bg-white dark:bg-zinc-900 p-4 rounded overflow-x-auto">
        <div class="flex items-center mb-2">
          <span class="text-red-500 dark:text-red-400 mr-2">Old:</span>
          <span id="oldNamePreview" class="text-zinc-700 dark:text-gray-300 line-through">
            <%= filename %>
          </span>
        </div>
        <div class="flex items-center">
          <span class="text-green-600 dark:text-green-400 mr-2">New:</span>
          <span id="newNamePreview" class="text-zinc-900 dark:text-white font-semibold"></span>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Theme Toggle Functionality
    const themeToggle = document.getElementById('theme-toggle');
    const themeIconDark = document.getElementById('theme-icon-dark');
    const themeIconLight = document.getElementById('theme-icon-light');

    // Check for saved theme preference or use system preference
    const savedTheme = localStorage.getItem('theme') ||
      (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

    // Apply the saved theme
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark');
      themeIconDark.classList.add('hidden');
      themeIconLight.classList.remove('hidden');
    } else {
      document.documentElement.classList.remove('dark');
      themeIconDark.classList.remove('hidden');
      themeIconLight.classList.add('hidden');
    }

    // Toggle theme on button click
    themeToggle.addEventListener('click', () => {
      if (document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        themeIconDark.classList.remove('hidden');
        themeIconLight.classList.add('hidden');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        themeIconDark.classList.add('hidden');
        themeIconLight.classList.remove('hidden');
      }
    });

    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('editForm');
      const newFilenameInput = document.getElementById('newFilename');
      const submitBtn = document.getElementById('submitBtn');
      const btnText = document.getElementById('btnText');
      const btnSpinner = document.getElementById('btnSpinner');
      const previewSection = document.getElementById('previewSection');
      const oldNamePreview = document.getElementById('oldNamePreview');
      const newNamePreview = document.getElementById('newNamePreview');

      // Get file extension
      const originalFilename = "<%= filename %>";
      const fileExtension = originalFilename.split('.').pop();

      // Auto-focus the new filename input
      newFilenameInput.focus();

      // Update preview when typing
      newFilenameInput.addEventListener('input', function () {
        const newName = this.value.trim();
        
        if (newName) {
          // Show preview with smooth animation
          previewSection.classList.remove('opacity-0', 'translate-y-2');
          previewSection.classList.add('opacity-100', 'translate-y-0');
          
          // Update preview text
          const displayName = newName + (newName.includes('.') ? '' : '.' + fileExtension);
          newNamePreview.textContent = displayName;
        } else {
          // Hide preview with smooth animation
          previewSection.classList.remove('opacity-100', 'translate-y-0');
          previewSection.classList.add('opacity-0', 'translate-y-2');
        }
      });

      // Form submission
      form.addEventListener('submit', async function (e) {
        e.preventDefault();

        const newName = newFilenameInput.value.trim();
        
        // Validate empty input
        if (!newName) {
          showError("Please enter a new filename");
          newFilenameInput.classList.add('shake', 'border-red-500');
          setTimeout(() => {
            newFilenameInput.classList.remove('shake');
          }, 500);
          return;
        }

        // Validate forbidden characters
        const forbiddenChars = /[\\\/:*?"<>|]/;
        if (forbiddenChars.test(newName)) {
          showError('Filename cannot contain: \\ / : * ? " < > |');
          newFilenameInput.classList.add('shake', 'border-red-500');
          setTimeout(() => {
            newFilenameInput.classList.remove('shake');
          }, 500);
          return;
        }

        // Validate length
        if (newName.length > 100) {
          showError('Filename must be less than 100 characters');
          newFilenameInput.classList.add('shake', 'border-red-500');
          setTimeout(() => {
            newFilenameInput.classList.remove('shake');
          }, 500);
          return;
        }

        // Show loading state
        btnText.textContent = 'Updating...';
        btnSpinner.classList.remove('hidden');
        submitBtn.disabled = true;

        try {
          // Submit form
          const response = await fetch('/edit', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(new FormData(form))
          });

          if (!response.ok) {
            throw new Error('Failed to rename file');
          }

          // Show success message
          Swal.fire({
            icon: 'success',
            title: 'File Renamed!',
            text: 'The file has been successfully renamed.',
            willClose: () => {
              window.location.href = '/';
            }
          });
        } catch (error) {
          console.error('Error:', error);
          showError('An error occurred while renaming the file');
          btnText.textContent = 'Update Filename';
          btnSpinner.classList.add('hidden');
          submitBtn.disabled = false;
        }
      });

      // Clear error state on focus
      newFilenameInput.addEventListener('focus', function () {
        this.classList.remove('border-red-500');
      });

      // Helper function to show error messages
      function showError(message) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: message,
        });
      }
    });
  </script>
</body>
</html>