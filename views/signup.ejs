<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finder...</title>
    <link rel="icon" type="image/png" href="/images/fm1.png" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <script>
      tailwind.config = {
        darkMode: 'class', // Enable dark mode
      }
    </script>
    <style>
        /* Apply a smooth transition for color changes */
        body, .form-container {
            transition: background-color 0.5s ease, color 0.5s ease;
        }
    </style>
</head>
<body class="bg-zinc-100 dark:bg-zinc-900 flex flex-col items-center justify-center min-h-screen p-4 antialiased">

    <div class="w-full max-w-md space-y-8">
        <div class="text-center">
            <img class="mx-auto h-16 w-auto" src="/images/fm1.png" alt="Finder Logo">
            <h1 class="mt-4 text-3xl font-bold tracking-tight text-zinc-900 dark:text-white">
                Create an account for <span class="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-500">Finder...</span>
            </h1>
        </div>

        <div class="bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm shadow-2xl rounded-2xl p-8 animate_animated animate_fadeInUp form-container">
            <form id="signup-form" class="space-y-6">

                <div id="error-message" class="hidden p-3 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg text-sm flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                    <span id="error-text"></span>
                </div>

                <div>
                    <label for="username" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Username</label>
                    <div class="mt-1 relative">
                        <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                        </span>
                        <input id="username" name="username" type="text" autocomplete="username" required placeholder="your_username" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>

                <div>
                    <label for="email" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Email address</label>
                    <div class="mt-1 relative">
                        <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                            </svg>
                        </span>
                        <input id="email" name="email" type="email" autocomplete="email" required placeholder="you@example.com" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Password</label>
                    <div class="mt-1 relative">
                         <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                        </span>
                        <input id="password" name="password" type="password" autocomplete="new-password" required placeholder="••••••••" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>
                
                 <div>
                    <label for="reconfirmPassword" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Re-confirm Password</label>
                    <div class="mt-1 relative">
                         <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                        </span>
                        <input id="reconfirmPassword" name="reconfirmPassword" type="password" autocomplete="new-password" required placeholder="••••••••" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>

                <div>
                    <button id="signup-submit-btn" type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-100 dark:focus:ring-offset-zinc-900 focus:ring-blue-500 transition-all duration-300 transform hover:scale-105">
                        Create Account
                    </button>
                </div>
            </form>

            <div class="relative my-6">
              <div class="absolute inset-0 flex items-center" aria-hidden="true">
                <div class="w-full border-t border-zinc-300 dark:border-zinc-600"></div>
              </div>
              <div class="relative flex justify-center text-sm">
                <span class="px-2 bg-white dark:bg-zinc-800 text-zinc-500 dark:text-zinc-400">OR</span>
              </div>
            </div>

            <div>
              <button id="google-signin-btn" type="button" class="w-full inline-flex justify-center items-center py-3 px-4 border border-zinc-300 rounded-lg shadow-sm bg-white text-sm font-medium text-zinc-800 hover:bg-zinc-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-100 dark:focus:ring-offset-zinc-900 focus:ring-blue-500 transition-all duration-300 transform hover:scale-105">
                    <svg class="w-5 h-5 mr-3" aria-hidden="true" focusable="false" viewBox="0 0 48 48">
                        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path>
                        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path>
                        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path>
                        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path>
                        <path fill="none" d="M0 0h48v48H0z"></path>
                    </svg>
                    Continue with Google
                </button>
            </div>
            <div class="text-center mt-6">
                <a href="/login" class="font-medium text-sm text-blue-500 hover:text-blue-400 transition-colors">
                    Already have an account? Sign in
                </a>
            </div>
        </div>
    </div>

  <script type="module">
        // START: Import new Google Auth providers
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, GoogleAuthProvider, signInWithPopup } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-auth.js";
        // END: Import new Google Auth providers
        
        const firebaseConfig = {
            apiKey: "AIzaSyABf45Hk2BDO46LTXueVTrvbjxHabcRoDU",
            authDomain: "finder-8c490.firebaseapp.com",
            projectId: "finder-8c490",
            storageBucket: "finder-8c490.firebasestorage.app",
            messagingSenderId: "377389818457",
            appId: "1:377389818457:web:555848e4e84d37e28d8748",
            measurementId: "G-EVLFL57D9R"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        
        const signupForm = document.getElementById('signup-form');
        const submitButton = document.getElementById('signup-submit-btn');
        const errorMessageDiv = document.getElementById('error-message');
        const errorTextSpan = document.getElementById('error-text');

        if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        // Helper function to handle successful authentication
        function handleAuthSuccess(userCredential) {
            return userCredential.user.getIdToken()
                .then((idToken) => fetch('/sessionLogin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ idToken }),
                }))
                .then((response) => {
                    if (!response.ok) throw new Error('Session login failed.');
                    window.location.href = '/';
                });
        }
        
        // Helper function to handle failed authentication
        function handleAuthError(error, button, originalContent) {
            let friendlyMessage = "Sign up failed. Please try again.";
            if (error.code) {
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        friendlyMessage = "This email address is already in use.";
                        break;
                    case 'auth/weak-password':
                        friendlyMessage = "Password is too weak. It should be at least 6 characters long.";
                        break;
                    case 'auth/invalid-email':
                        friendlyMessage = "Please enter a valid email address.";
                        break;
                    case 'auth/popup-closed-by-user':
                        friendlyMessage = "Sign-up cancelled. Please try again.";
                        break;
                }
            }
            errorTextSpan.textContent = friendlyMessage;
            errorMessageDiv.classList.remove('hidden');

            if (button && originalContent) {
              button.disabled = false;
              button.innerHTML = originalContent;
            }
        }

        // Event listener for Email/Password form
        signupForm.addEventListener('submit', (e) => {
            e.preventDefault();

            const email = signupForm.email.value;
            const password = signupForm.password.value;
            const reconfirmPassword = signupForm.reconfirmPassword.value;
            const originalButtonContent = submitButton.innerHTML;
            
            if (password !== reconfirmPassword) {
                errorTextSpan.textContent = "Passwords do not match. Please try again.";
                errorMessageDiv.classList.remove('hidden');
                return;
            }

            submitButton.disabled = true;
            submitButton.innerHTML = `
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating Account...
            `;
            errorMessageDiv.classList.add('hidden');

            createUserWithEmailAndPassword(auth, email, password)
                .then(handleAuthSuccess)
                .catch((error) => handleAuthError(error, submitButton, originalButtonContent));
        });

        // START: New Google Sign-In logic
        const googleSignInBtn = document.getElementById('google-signin-btn');
        const googleProvider = new GoogleAuthProvider();

        googleSignInBtn.addEventListener('click', () => {
          errorMessageDiv.classList.add('hidden');
          signInWithPopup(auth, googleProvider)
            .then(handleAuthSuccess)
            .catch((error) => handleAuthError(error));
        });
        // END: New Google Sign-In logic
    </script>

</body>
</html>