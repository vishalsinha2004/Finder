<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Finder</title>
    <link rel="icon" type="image/png" href="/images/fm1.png" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <script>
      tailwind.config = {
        darkMode: 'class', // Enable dark mode
      }
    </script>
    <style>
        /* Apply a smooth transition for color changes */
        body, .form-container {
            transition: background-color 0.5s ease, color 0.5s ease;
        }
    </style>
</head>
<body class="bg-zinc-100 dark:bg-zinc-900 flex flex-col items-center justify-center min-h-screen p-4 antialiased">

    <div class="w-full max-w-md space-y-8">
        <div class="text-center">
            <img class="mx-auto h-16 w-auto" src="/images/fm1.png" alt="Finder Logo">
            <h1 class="mt-4 text-3xl font-bold tracking-tight text-zinc-900 dark:text-white">
                Sign in to <span class="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-500">Finder...</span>
            </h1>
        </div>

        <div class="bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm shadow-2xl rounded-2xl p-8 animate__animated animate__fadeInUp form-container">
            <form id="login-form" class="space-y-6">

                <div id="error-message" class="hidden p-3 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg text-sm flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                    <span id="error-text"></span>
                </div>

                <div>
                    <label for="email" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Email address</label>
                    <div class="mt-1 relative">
                        <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                            </svg>
                        </span>
                        <input id="email" name="email" type="email" autocomplete="email" required placeholder="you@example.com" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-zinc-700 dark:text-zinc-300">Password</label>
                    <div class="mt-1 relative">
                         <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-zinc-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                        </span>
                        <input id="password" name="password" type="password" autocomplete="current-password" required placeholder="••••••••" class="block w-full pl-10 px-4 py-3 bg-zinc-100 dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300">
                    </div>
                </div>

                <div>
                    <button id="login-submit-btn" type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-100 dark:focus:ring-offset-zinc-900 focus:ring-blue-500 transition-all duration-300 transform hover:scale-105">
                        Sign In
                    </button>
                </div>
            </form>
             <div class="text-center mt-6">
                <a href="/signup" class="font-medium text-sm text-blue-500 hover:text-blue-400 transition-colors">
                    Don't have an account? Sign up
                </a>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-auth.js";

        // --- Your Firebase Config ---
        const firebaseConfig = {
            apiKey: "AIzaSyABf45Hk2BDO46LTXueVTrvbjxHabcRoDU",
            authDomain: "finder-8c490.firebaseapp.com",
            projectId: "finder-8c490",
            storageBucket: "finder-8c490.firebasestorage.app",
            messagingSenderId: "377389818457",
            appId: "1:377389818457:web:33832714f43e63078d8748",
            measurementId: "G-5VQZKGPQZ3"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);

        const loginForm = document.getElementById('login-form');
        const submitButton = document.getElementById('login-submit-btn');
        const errorMessageDiv = document.getElementById('error-message');
        const errorTextSpan = document.getElementById('error-text');

        // Dark Mode Logic to sync with system/localStorage preference
        if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = loginForm.email.value;
            const password = loginForm.password.value;
            const originalButtonContent = submitButton.innerHTML;

            // Disable button and show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Signing In...
            `;
            // Hide previous errors
            errorMessageDiv.classList.add('hidden');

            signInWithEmailAndPassword(auth, email, password)
                .then((userCredential) => userCredential.user.getIdToken())
                .then((idToken) => fetch('/sessionLogin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ idToken }),
                }))
                .then((response) => {
                    if (!response.ok) throw new Error('Session login failed.');
                    window.location.href = '/';
                })
                .catch((error) => {
                    let friendlyMessage = "Login failed. Please check your credentials.";
                    // Provide more specific (but safe) error messages
                    if (error.code) {
                        switch (error.code) {
                            case 'auth/user-not-found':
                            case 'auth/wrong-password':
                            case 'auth/invalid-credential':
                                friendlyMessage = "Invalid email or password. Please try again.";
                                break;
                            case 'auth/too-many-requests':
                                friendlyMessage = "Access temporarily disabled due to many failed login attempts.";
                                break;
                        }
                    }
                    errorTextSpan.textContent = friendlyMessage;
                    errorMessageDiv.classList.remove('hidden');

                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonContent;
                });
        });
    </script>
</body>
</html>